<%- include('components/clientHeader', { pageTitle: 'employeeDashboard' }) %>

    <div style="width: 100%; display: flex;">

        <div class="status-section" style="flex: 1; padding: 20px;">
            <div class="info">
                <h1>Department HelpDesk Dashboard</h1>
                <h2>Name of the Employee is: <%= name %>
                </h2>
                <h2>Employee ID is: <%= employeeId%>
                </h2>
                <h2>Department is: <%= department%>
                </h2>
            </div>
            <h2>Tickets Raised to the Department</h2>
            <ul>
                <% if (previousTickets.length> 0) { %>
                    <% previousTickets.forEach(ticket=> { %>
                        <li>
                            <p>Created On: <%= ticket.createdAt.toISOString().split('T')[0] %>
                            </p> <!-- Display created date -->
                            <p>Created At: <%= ticket.createdAt.toISOString().split('T')[1].substr(0, 8) %>
                            </p> <!-- Display created time -->
                            <p>Ticket ID: <%= ticket.ticketId %>
                            </p>

                            <p>Problem Description: <%= ticket.problemDescription %>
                            </p>

                            <p>Department: <%= ticket.department %>
                            </p>
                            <p>Status: <%= ticket.status %>
                            </p>
                            <p>Solution: <%= ticket.solution || 'Not available' %>
                            </p>
                        </li>
                        <% }); %>
                            <% } else { %>
                                <p>No previous tickets.</p>
                                <% } %>
            </ul>
        </div>
        <!-- Chat  -->
        <div class="chat-section">

            <h2>Chat</h2>
            <label for="tICKETid">tICKETid</label>
            <select class="form-select" id ="ticketSelect" required>
                <option value="" selected>Select a tICKETid</option>

                <% for (const tickets of previousTickets) { %>
                    <option value="<%= tickets.ticketId %>">
                        <%= tickets.ticketId %>
                    </option>
                    <% } %>
            </select>
            <div id="previousChatMessages">
                <!-- Display previous chat messages -->
                
            </div>
            <div id="chatMessages"></div>
            

<input type="text" id="messageInput">
<button id="sendButton">Send</button>
        </div>
        <!--                           Solve the ticket 
     -->
        <div style="flex: 1; padding: 20px; ">
            <div class="ticket-edit-section">
                <h2>Edit and Update Ticket</h2>
                <img src="solver.png" alt="Ticket Generation Image" style="max-width: 100%;">
                <form action="/updateTicket" method="post">
                    <label for="ticketId">Select Ticket by ID:</label>
                    <select name="ticketId">
                        <% for (const tickets of previousTickets) { %>
                            <option value="<%= tickets.ticketId %>">
                                <%= tickets.ticketId %>
                            </option>
                            <% } %>
                    </select>
                    <label for="newStatus">New Status:</label>
                    <select name="newStatus">
                        <option value="Pending">Pending</option>
                        <option value="Solved">Solved</option>
                        <!-- Add more options if needed -->
                    </select>
                    <textarea name="solution" rows="4" cols="50" placeholder="Add solution"></textarea>
                    <button type="submit">Update Ticket</button>
                </form>
            </div>


        </div>

    </div>

    <%- include('components/footer', { currentYear: new Date().getFullYear() }) %>

    <!-- <script src="/socket.io/socket.io.js"></script>
    <script src="/socket.io/socket.io.js"></script>
  <script src="/js/chat.js"></script> -->
<!-- <script src="/js/script.js"></script> -->
<script src="/socket.io/socket.io.js"></script>
<!-- <script>
  const socket = io(); // Create Socket.IO instance

  const tICKETid = document.getElementById('tICKETid');
  const chatMessages = document.getElementById('chatMessages');
  const messageInput = document.getElementById('messageInput');
  const sendButton = document.getElementById('sendButton');

  let currentTicketId = '';

  const connectToRoom = (ticketId) => {
      if (currentTicketId) {
          socket.emit('leave', currentTicketId);
      }
      currentTicketId = ticketId;
      socket.emit('join', ticketId);
      console.log(`Connected to room ${ticketId}`);
  };

  const sendMessage = () => {
      const message = messageInput.value;
      if (message.trim() !== '') {
          socket.emit('message', { ticketId: currentTicketId, message });
          messageInput.value = '';
      }
  };

  tICKETid.addEventListener('change', (event) => {
      const selectedTicketId = event.target.value;
      if (selectedRoom !== "") {
          connectToRoom(selectedTicketId);
      }
  });

  sendButton.addEventListener('click', sendMessage);

  socket.on('connect', () => {
      console.log('Connected to Socket.IO');
  });

  socket.on('disconnect', () => {
      console.log('Disconnected from Socket.IO');
  });

  socket.on('message', ({ ticketId, message }) => {
      if (ticketId === currentTicketId) {
        console.log('Before createElement');
const messageElement = document.createElement('div');
console.log('After createElement');          messageElement.textContent = message;
console.log('Before appendChild');
chatMessages.appendChild(messageElement);
console.log('After appendChild');      }
  });
</script> -->
<!-- <script>

    const socket = io(); // Create Socket.IO instance

    const tICKETid = document.getElementById('tICKETid');
    const chatMessages = document.getElementById('chatMessages');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');

    let currentRoom = '';

    const connectToRoom = (room) => {
        if (currentRoom) {
            socket.emit('leave', currentRoom);
        }
        currentRoom = room;
        socket.emit('join', room);
        console.log(`Connected to room ${room}`);
    };

    const sendMessage = () => {
        const message = messageInput.value;
        if (message.trim() !== '') {
            socket.emit('message', { room: ticketId, message });
            messageInput.value = '';
        }
    };

    tICKETid.addEventListener('change', (event) => {
        const ticketId = event.target.value;
        if (ticketId !== "") {
            connectToRoom(ticketId);
        }
    });

    sendButton.addEventListener('click', sendMessage);

    socket.on('connect', () => {
        console.log('Connected to Socket.IO');
    });

    socket.on('disconnect', () => {
        console.log('Disconnected from Socket.IO');
    });

    socket.on('message', ({ room, message }) => {
        if (room === currentRoom) {
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            chatMessages.appendChild(messageElement);
        }
    });
</script> -->
<script>
    const socket = io();

const ticketSelect = document.getElementById('ticketSelect');
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');

let currentTicketId = '';

ticketSelect.addEventListener('change', (event) => {
    const selectedTicketId = event.target.value;
    connectToTicket(selectedTicketId);
});

sendButton.addEventListener('click', sendMessage);

socket.on('message', ({ ticketId, message }) => {
    if (ticketId === currentTicketId) {
        const messageElement = document.createElement('div');
        messageElement.textContent = message;
        chatMessages.appendChild(messageElement);
    }
});

function connectToTicket(ticketId) {
    if (currentTicketId) {
        socket.emit('leave', currentTicketId);
    }
    currentTicketId = ticketId;
    socket.emit('join', ticketId);
    chatMessages.innerHTML = ''; // Clear previous messages
}

function sendMessage() {
    const message = messageInput.value;
    if (message.trim() !== '') {
        socket.emit('message', { ticketId: currentTicketId, message });
        messageInput.value = '';
    }
}

ticketSelect.addEventListener('change', async (event) => {
    const selectedTicketIdChat = event.target.value;
    const previousChatMessages = document.getElementById('previousChatMessages');
    
    // Send an AJAX request to the server
    try {
        const response = await fetch(`/getPreviousChat?ticketId=${selectedTicketIdChat}`);
        const previousChat = await response.json();

        // Clear previous messages
        previousChatMessages.innerHTML = '';

        // Display each chat message
        previousChat.forEach(message => {
            const messageElement = document.createElement('div');
            messageElement.textContent = message.message; // Adjust this based on your schema
            previousChatMessages.appendChild(messageElement);
        });

        console.log(previousChat);
    } catch (error) {
        console.error('Error fetching previous chat:', error);
    }
});

</script>
</body>
</html>